{"includedArchiveIdentifiers":["FSM"],"interfaceLanguages":{"swift":[{"children":[{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/fsm\/concepts","title":"FSM Concepts","type":"article"},{"path":"\/documentation\/fsm\/gettingstarted","title":"Getting Started with ``FSM``","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/arrangementwrapper\/init(coder:)","title":"init?(coder: NSCoder)","type":"init"},{"path":"\/documentation\/fsm\/arrangementwrapper\/init(directorywithfilewrappers:for:named:language:)","title":"init(directoryWithFileWrappers: [MachineName : FileWrapper], for: Arrangement, named: String?, language: (any LanguageBinding)?)","type":"init"},{"path":"\/documentation\/fsm\/arrangementwrapper\/init(filewrapper:)","title":"init(fileWrapper: FileWrapper) throws","type":"init"},{"path":"\/documentation\/fsm\/arrangementwrapper\/init(url:options:)","title":"init(url: URL, options: FileWrapper.ReadingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/arrangementwrapper\/arrangement","title":"var arrangement: Arrangement","type":"property"},{"path":"\/documentation\/fsm\/arrangementwrapper\/issuspensible","title":"var isSuspensible: Bool","type":"property"},{"path":"\/documentation\/fsm\/arrangementwrapper\/language","title":"var language: any LanguageBinding","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/arrangementwrapper\/write(to:options:originalcontentsurl:)","title":"func write(to: URL, options: FileWrapper.WritingOptions, originalContentsURL: URL?) throws","type":"method"}],"path":"\/documentation\/fsm\/arrangementwrapper","title":"ArrangementWrapper","type":"class"},{"path":"\/documentation\/fsm\/directorywrapper","title":"DirectoryWrapper","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/rawvalue","title":"var rawValue: UInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/immediate","title":"static var immediate: FileWrapper.ReadingOptions","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/withoutmapping","title":"static var withoutMapping: FileWrapper.ReadingOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/fsm\/filewrapper\/readingoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/filewrapper\/readingoptions","title":"FileWrapper.ReadingOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/rawvalue","title":"var rawValue: UInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/atomic","title":"static var atomic: FileWrapper.WritingOptions","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/withnameupdating","title":"static var withNameUpdating: FileWrapper.WritingOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/fsm\/filewrapper\/writingoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/filewrapper\/writingoptions","title":"FileWrapper.WritingOptions","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/init(directorywithfilewrappers:)","title":"init(directoryWithFileWrappers: [String : FileWrapper])","type":"init"},{"path":"\/documentation\/fsm\/filewrapper\/init(regularfilewithcontents:)","title":"init(regularFileWithContents: Data)","type":"init"},{"path":"\/documentation\/fsm\/filewrapper\/init(symboliclinkwithdestinationurl:)","title":"init(symbolicLinkWithDestinationURL: URL)","type":"init"},{"path":"\/documentation\/fsm\/filewrapper\/init(url:options:)","title":"init(url: URL, options: FileWrapper.ReadingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/filewrappers","title":"var fileWrappers: [String : FileWrapper]?","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/filename","title":"var filename: String?","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/isdirectory","title":"var isDirectory: Bool","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/isregularfile","title":"var isRegularFile: Bool","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/issymboliclink","title":"var isSymbolicLink: Bool","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/preferredfilename","title":"var preferredFilename: String?","type":"property"},{"path":"\/documentation\/fsm\/filewrapper\/regularfilecontents","title":"var regularFileContents: Data?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/filewrapper\/addfilewrapper(_:)","title":"func addFileWrapper(FileWrapper) -> String","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/read(from:options:)","title":"func read(from: URL, options: FileWrapper.ReadingOptions) throws","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/removefilewrapper(_:)","title":"func removeFileWrapper(FileWrapper)","type":"method"},{"path":"\/documentation\/fsm\/filewrapper\/write(to:options:originalcontentsurl:)","title":"func write(to: URL, options: FileWrapper.WritingOptions, originalContentsURL: URL?) throws","type":"method"}],"path":"\/documentation\/fsm\/filewrapper","title":"FileWrapper","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/machine\/init()","title":"init()","type":"init"},{"path":"\/documentation\/fsm\/machine\/init(from:)-35mtz","title":"convenience init(from: URL) throws","type":"init"},{"path":"\/documentation\/fsm\/machine\/init(from:)-4ep7z","title":"init(from: MachineWrapper) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/machine\/activities","title":"var activities: StateActivitiesSourceCode","type":"property"},{"path":"\/documentation\/fsm\/machine\/boilerplate","title":"var boilerplate: any Boilerplate","type":"property"},{"path":"\/documentation\/fsm\/machine\/language","title":"var language: any LanguageBinding","type":"property"},{"path":"\/documentation\/fsm\/machine\/llfsm","title":"var llfsm: LLFSM","type":"property"},{"path":"\/documentation\/fsm\/machine\/stateboilerplate","title":"var stateBoilerplate: [StateID : any Boilerplate]","type":"property"},{"path":"\/documentation\/fsm\/machine\/statelayout","title":"var stateLayout: StateLayouts","type":"property"},{"path":"\/documentation\/fsm\/machine\/transitionlayout","title":"var transitionLayout: TransitionLayouts","type":"property"},{"path":"\/documentation\/fsm\/machine\/windowlayout","title":"var windowLayout: Data?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/machine\/add(to:language:issuspensible:)","title":"func add(to: MachineWrapper, language: (any LanguageBinding)?, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/machine\/write(to:issuspensible:)","title":"func write(to: URL, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/machine\/write(to:language:issuspensible:)","title":"func write(to: URL, language: any OutputLanguage, isSuspensible: Bool) throws","type":"method"}],"path":"\/documentation\/fsm\/machine","title":"Machine","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/machinewrapper\/init(_:)","title":"convenience init?(FileWrapper)","type":"init"},{"path":"\/documentation\/fsm\/machinewrapper\/init(coder:)","title":"init?(coder: NSCoder)","type":"init"},{"path":"\/documentation\/fsm\/machinewrapper\/init(directorywithfilewrappers:for:named:)","title":"init(directoryWithFileWrappers: [String : FileWrapper], for: Machine, named: String?)","type":"init"},{"path":"\/documentation\/fsm\/machinewrapper\/init(filewrapper:)","title":"init(fileWrapper: FileWrapper) throws","type":"init"},{"path":"\/documentation\/fsm\/machinewrapper\/init(for:url:options:)","title":"init(for: Machine, url: URL, options: FileWrapper.ReadingOptions) throws","type":"init"},{"path":"\/documentation\/fsm\/machinewrapper\/init(url:options:)","title":"convenience init(url: URL, options: FileWrapper.ReadingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/machinewrapper\/issuspensible","title":"var isSuspensible: Bool","type":"property"},{"path":"\/documentation\/fsm\/machinewrapper\/language","title":"var language: any LanguageBinding","type":"property"},{"path":"\/documentation\/fsm\/machinewrapper\/machine","title":"var machine: Machine","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/machinewrapper\/write(to:options:originalcontentsurl:)","title":"func write(to: URL, options: FileWrapper.WritingOptions, originalContentsURL: URL?) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/machinewrapper\/dottedsuffix","title":"static let dottedSuffix: String","type":"property"},{"path":"\/documentation\/fsm\/machinewrapper\/fileextension","title":"static let fileExtension: String","type":"property"}],"path":"\/documentation\/fsm\/machinewrapper","title":"MachineWrapper","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/fsm\/bezierpath\/init(_:)-1yw6x","title":"init(Point2D...)","type":"init"}],"title":"BezierPath Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/bezierpath\/init(_:)","title":"init([Point2D])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/bezierpath\/beg","title":"var beg: Point2D","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/cp1","title":"var cp1: Point2D","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/cp2","title":"var cp2: Point2D","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/end","title":"var end: Point2D","type":"property"},{"children":[{"children":[{"path":"\/documentation\/fsm\/bezierpath\/points-4gfbk","title":"var points: [Point2D]","type":"property"}],"title":"BezierPath Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/bezierpath\/points","title":"var points: [Point2D]","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/x0","title":"var x0: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/x1","title":"var x1: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/x2","title":"var x2: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/xn","title":"var xn: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/xs","title":"var xs: [Double]","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/y0","title":"var y0: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/y1","title":"var y1: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/y2","title":"var y2: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/yn","title":"var yn: Double","type":"property"},{"path":"\/documentation\/fsm\/bezierpath\/ys","title":"var ys: [Double]","type":"property"}],"path":"\/documentation\/fsm\/bezierpath","title":"BezierPath","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/fsm\/boilerplate\/sectionname","title":"SectionName","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/boilerplate\/init()","title":"init()","type":"init"},{"children":[{"children":[{"path":"\/documentation\/fsm\/boilerplate\/init(_:)-ay5s","title":"init(any Boilerplate)","type":"init"}],"title":"Boilerplate Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/boilerplate\/init(_:)","title":"init(any Boilerplate)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/boilerplate\/sections","title":"var sections: [Self.SectionName : BoilerplateCode]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/boilerplate\/add(state:to:)","title":"func add(state: String, to: MachineWrapper)","type":"method"},{"path":"\/documentation\/fsm\/boilerplate\/add(to:)","title":"func add(to: MachineWrapper)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/boilerplate\/getsection(named:)-1omcc","title":"func getSection(named: String) -> BoilerplateCode","type":"method"}],"title":"Boilerplate Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/boilerplate\/getsection(named:)","title":"func getSection(named: String) -> BoilerplateCode","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fsm\/boilerplate\/boilerplatefilemapping","title":"Boilerplate.BoilerplateFileMapping","type":"typealias"}],"path":"\/documentation\/fsm\/boilerplate","title":"Boilerplate","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/fsm\/fsm\/initialstate-951q9","title":"var initialState: StateID","type":"property"}],"title":"FSM Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/fsm\/initialstate","title":"var initialState: StateID","type":"property"},{"path":"\/documentation\/fsm\/fsm\/states","title":"var states: StateArray","type":"property"},{"path":"\/documentation\/fsm\/fsm\/transitions","title":"var transitions: TransitionArray","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsm\/transitionsfrom(_:)","title":"func transitionsFrom(StateID) -> TransitionArray","type":"method"}],"path":"\/documentation\/fsm\/fsm","title":"FSM","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/languagebinding\/name","title":"var name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/languagebinding\/boilerplate(for:)","title":"func boilerplate(for: MachineWrapper) -> any Boilerplate","type":"method"},{"path":"\/documentation\/fsm\/languagebinding\/expression(of:for:statename:)","title":"func expression(of: Int, for: MachineWrapper, stateName: StateName) -> String","type":"method"},{"path":"\/documentation\/fsm\/languagebinding\/numberoftransitions(for:statename:)","title":"func numberOfTransitions(for: MachineWrapper, stateName: StateName) -> Int","type":"method"},{"path":"\/documentation\/fsm\/languagebinding\/stateboilerplate(for:statename:)","title":"func stateBoilerplate(for: MachineWrapper, stateName: StateName) -> any Boilerplate","type":"method"},{"path":"\/documentation\/fsm\/languagebinding\/suspendstate(for:states:)","title":"func suspendState(for: MachineWrapper, states: [State]) -> StateID?","type":"method"},{"path":"\/documentation\/fsm\/languagebinding\/target(of:for:statename:with:)","title":"func target(of: Int, for: MachineWrapper, stateName: StateName, with: [State]) -> StateID?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/languagebinding\/windowlayout(for:)-5iju0","title":"func windowLayout(for: MachineWrapper) -> Data?","type":"method"}],"title":"LanguageBinding Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/languagebinding\/windowlayout(for:)","title":"func windowLayout(for: MachineWrapper) -> Data?","type":"method"}],"path":"\/documentation\/fsm\/languagebinding","title":"LanguageBinding","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/outputlanguage\/add(boilerplate:to:)","title":"func add(boilerplate: any Boilerplate, to: MachineWrapper) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/outputlanguage\/add(layout:to:)-1c10v","title":"func add(layout: StateNameLayouts, to: MachineWrapper) throws","type":"method"}],"title":"OutputLanguage Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/outputlanguage\/add(layout:to:)","title":"func add(layout: StateNameLayouts, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/add(stateboilerplate:to:for:)","title":"func add(stateBoilerplate: any Boilerplate, to: MachineWrapper, for: String) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/outputlanguage\/add(statenames:to:)-6c3uz","title":"func add(stateNames: StateNames, to: MachineWrapper) throws","type":"method"}],"title":"OutputLanguage Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/outputlanguage\/add(statenames:to:)","title":"func add(stateNames: StateNames, to: MachineWrapper) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/outputlanguage\/add(windowlayout:to:)-6g3ou","title":"func add(windowLayout: Data?, to: MachineWrapper) throws","type":"method"}],"title":"OutputLanguage Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/outputlanguage\/add(windowlayout:to:)","title":"func add(windowLayout: Data?, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addarrangementcmakefile(for:to:issuspensible:)","title":"func addArrangementCMakeFile(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addarrangementcode(for:to:issuspensible:)","title":"func addArrangementCode(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addarrangementinterface(for:to:issuspensible:)","title":"func addArrangementInterface(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/outputlanguage\/addarrangementmachine(instances:to:issuspensible:)-3h15q","title":"func addArrangementMachine(instances: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"}],"title":"OutputLanguage Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/outputlanguage\/addarrangementmachine(instances:to:issuspensible:)","title":"func addArrangementMachine(instances: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addcmakefile(for:boilerplate:to:issuspensible:)","title":"func addCMakeFile(for: LLFSM, boilerplate: any Boilerplate, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addcmakefile(for:to:issuspensible:)","title":"func addCMakeFile(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addcode(for:to:issuspensible:)","title":"func addCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addinterface(for:to:issuspensible:)","title":"func addInterface(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/outputlanguage\/addlanguage(to:)-38v85","title":"func addLanguage(to: FileWrapper) throws","type":"method"}],"title":"OutputLanguage Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/outputlanguage\/addlanguage(to:)","title":"func addLanguage(to: FileWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addstatecode(for:to:issuspensible:)","title":"func addStateCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addstateinterface(for:to:issuspensible:)","title":"func addStateInterface(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/outputlanguage\/addtransitioncode(for:to:issuspensible:)","title":"func addTransitionCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/outputlanguage\/createarrangementwrapper(at:)-4iybf","title":"func createArrangementWrapper(at: URL) throws -> ArrangementWrapper","type":"method"}],"title":"OutputLanguage Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/outputlanguage\/createarrangementwrapper(at:)","title":"func createArrangementWrapper(at: URL) throws -> ArrangementWrapper","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fsm\/outputlanguage\/createwrapper(at:for:)-1v7z3","title":"func createWrapper(at: URL, for: Machine?) throws -> MachineWrapper","type":"method"}],"title":"OutputLanguage Implementations","type":"groupMarker"}],"path":"\/documentation\/fsm\/outputlanguage\/createwrapper(at:for:)","title":"func createWrapper(at: URL, for: Machine?) throws -> MachineWrapper","type":"method"}],"path":"\/documentation\/fsm\/outputlanguage","title":"OutputLanguage","type":"protocol"},{"path":"\/documentation\/fsm\/propertylist","title":"PropertyList","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/rectangle2d\/bottomleft","title":"var bottomLeft: Coordinate2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/bottomright","title":"var bottomRight: Coordinate2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/bottomy","title":"var bottomY: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/dimensions","title":"var dimensions: Dimensions2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/h","title":"var h: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/leftx","title":"var leftX: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/rightx","title":"var rightX: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/topleft","title":"var topLeft: Coordinate2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/topright","title":"var topRight: Coordinate2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/topy","title":"var topY: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/w","title":"var w: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/x","title":"var x: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle2d\/y","title":"var y: Double","type":"property"}],"path":"\/documentation\/fsm\/rectangle2d","title":"Rectangle2D","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivities\/stateaction","title":"StateAction","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivities\/actions","title":"var actions: Self.StateActionsMapping","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivities\/actions(for:)","title":"func actions(for: StateID) -> Self.StateActivity","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivities\/stateactionsmapping","title":"StateActivities.StateActionsMapping","type":"typealias"},{"path":"\/documentation\/fsm\/stateactivities\/stateactivity","title":"StateActivities.StateActivity","type":"typealias"}],"path":"\/documentation\/fsm\/stateactivities","title":"StateActivities","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/statenode\/id","title":"var id: StateID","type":"property"},{"path":"\/documentation\/fsm\/statenode\/name","title":"var name: String","type":"property"}],"path":"\/documentation\/fsm\/statenode","title":"StateNode","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/statenodelayout\/closedlayout","title":"var closedLayout: Ellipse","type":"property"},{"path":"\/documentation\/fsm\/statenodelayout\/isopen","title":"var isOpen: Bool","type":"property"},{"path":"\/documentation\/fsm\/statenodelayout\/layout","title":"var layout: Rectangle","type":"property"},{"path":"\/documentation\/fsm\/statenodelayout\/openlayout","title":"var openLayout: Rectangle","type":"property"}],"path":"\/documentation\/fsm\/statenodelayout","title":"StateNodeLayout","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/suspensible\/suspendstate","title":"var suspendState: StateID?","type":"property"}],"path":"\/documentation\/fsm\/suspensible","title":"Suspensible","type":"protocol"},{"path":"\/documentation\/fsm\/suspensiblefsm","title":"SuspensibleFSM","type":"protocol"},{"path":"\/documentation\/fsm\/targettransition","title":"TargetTransition","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlabel\/label","title":"var label: Expression","type":"property"}],"path":"\/documentation\/fsm\/transitionlabel","title":"TransitionLabel","type":"protocol"},{"path":"\/documentation\/fsm\/transitionpath","title":"TransitionPath","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionsource\/source","title":"var source: StateID","type":"property"}],"path":"\/documentation\/fsm\/transitionsource","title":"TransitionSource","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitiontarget\/target","title":"var target: StateID","type":"property"}],"path":"\/documentation\/fsm\/transitiontarget","title":"TransitionTarget","type":"protocol"},{"path":"\/documentation\/fsm\/transitionvertex","title":"TransitionVertex","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionvertexlayout\/path","title":"var path: Path","type":"property"}],"path":"\/documentation\/fsm\/transitionvertexlayout","title":"TransitionVertexLayout","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/vector2d\/init(_:_:)","title":"init(Double, Double)","type":"init"},{"path":"\/documentation\/fsm\/vector2d\/init(r:_:)","title":"init(r: Double, θ: Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/vector2d\/h","title":"var h: Double","type":"property"},{"path":"\/documentation\/fsm\/vector2d\/polarangle","title":"var polarAngle: Double","type":"property"},{"path":"\/documentation\/fsm\/vector2d\/polardistance","title":"var polarDistance: Double","type":"property"},{"path":"\/documentation\/fsm\/vector2d\/propertylist","title":"var propertyList: NSArray","type":"property"},{"path":"\/documentation\/fsm\/vector2d\/w","title":"var w: Double","type":"property"},{"path":"\/documentation\/fsm\/vector2d\/x","title":"var x: Double","type":"property"},{"path":"\/documentation\/fsm\/vector2d\/y","title":"var y: Double","type":"property"}],"path":"\/documentation\/fsm\/vector2d","title":"Vector2D","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/arrangement\/init(from:)-5tmto","title":"init(from: ArrangementWrapper) throws","type":"init"},{"path":"\/documentation\/fsm\/arrangement\/init(from:)-9pa31","title":"init(from: URL) throws","type":"init"},{"path":"\/documentation\/fsm\/arrangement\/init(namedinstances:)","title":"init(namedInstances: [Instance])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/arrangement\/namedinstances","title":"var namedInstances: [Instance]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/arrangement\/add(to:language:machinenames:issuspensible:)","title":"func add(to: ArrangementWrapper, language: any OutputLanguage, machineNames: [String], isSuspensible: Bool) throws -> [Filename]","type":"method"},{"path":"\/documentation\/fsm\/arrangement\/machineinstancenames(for:machinesfilename:)","title":"func machineInstanceNames(for: ArrangementWrapper, machinesFilename: Filename) -> [(instance: MachineName, machine: Filename)]","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/arrangement\/machinenames(from:)","title":"static func machineNames(from: String) -> [(instance: MachineName, machine: Filename)]","type":"method"}],"path":"\/documentation\/fsm\/arrangement","title":"Arrangement","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/cbinding\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/cbinding\/name","title":"let name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/cbinding\/boilerplate(for:)","title":"func boilerplate(for: MachineWrapper) -> any Boilerplate","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/expression(of:for:statename:)","title":"func expression(of: Int, for: MachineWrapper, stateName: StateName) -> String","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/numberoftransitions(for:statename:)","title":"func numberOfTransitions(for: MachineWrapper, stateName: StateName) -> Int","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/stateboilerplate(for:statename:)","title":"func stateBoilerplate(for: MachineWrapper, stateName: StateName) -> any Boilerplate","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/suspendstate(for:states:)","title":"func suspendState(for: MachineWrapper, states: [State]) -> StateID?","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/target(of:for:statename:with:)","title":"func target(of: Int, for: MachineWrapper, stateName: StateName, with: [State]) -> StateID?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/cbinding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/cbinding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/cbinding\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/cbinding\/windowlayout(for:)","title":"func windowLayout(for: MachineWrapper) -> Data?","type":"method"}],"path":"\/documentation\/fsm\/cbinding\/languagebinding-implementations","title":"LanguageBinding Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/cbinding\/add(boilerplate:to:)","title":"func add(boilerplate: any Boilerplate, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/add(layout:to:)","title":"func add(layout: StateNameLayouts, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/add(stateboilerplate:to:for:)","title":"func add(stateBoilerplate: any Boilerplate, to: MachineWrapper, for: String) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/add(statenames:to:)","title":"func add(stateNames: StateNames, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/add(windowlayout:to:)","title":"func add(windowLayout: Data?, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addarrangementcmakefile(for:to:issuspensible:)","title":"func addArrangementCMakeFile(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addarrangementcode(for:to:issuspensible:)","title":"func addArrangementCode(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addarrangementinterface(for:to:issuspensible:)","title":"func addArrangementInterface(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addarrangementmachine(instances:to:issuspensible:)","title":"func addArrangementMachine(instances: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addcmakefile(for:boilerplate:to:issuspensible:)","title":"func addCMakeFile(for: LLFSM, boilerplate: any Boilerplate, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addcmakefile(for:to:issuspensible:)","title":"func addCMakeFile(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addcode(for:to:issuspensible:)","title":"func addCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addinterface(for:to:issuspensible:)","title":"func addInterface(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addlanguage(to:)","title":"func addLanguage(to: FileWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addstatecode(for:to:issuspensible:)","title":"func addStateCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addstateinterface(for:to:issuspensible:)","title":"func addStateInterface(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/addtransitioncode(for:to:issuspensible:)","title":"func addTransitionCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/createarrangementwrapper(at:)","title":"func createArrangementWrapper(at: URL) throws -> ArrangementWrapper","type":"method"},{"path":"\/documentation\/fsm\/cbinding\/createwrapper(at:for:)","title":"func createWrapper(at: URL, for: Machine?) throws -> MachineWrapper","type":"method"}],"path":"\/documentation\/fsm\/cbinding\/outputlanguage-implementations","title":"OutputLanguage Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/cbinding","title":"CBinding","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/init()","title":"init()","type":"init"},{"path":"\/documentation\/fsm\/cboilerplate\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/sections","title":"var sections: [CBoilerplate.SectionName : BoilerplateCode]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/init(_:)","title":"init(any Boilerplate)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/add(state:to:)","title":"func add(state: String, to: MachineWrapper)","type":"method"},{"path":"\/documentation\/fsm\/cboilerplate\/add(to:)","title":"func add(to: MachineWrapper)","type":"method"},{"path":"\/documentation\/fsm\/cboilerplate\/getsection(named:)","title":"func getSection(named: String) -> BoilerplateCode","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/functions","title":"case functions","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/includepath","title":"case includePath","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/includes","title":"case includes","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/internal","title":"case `internal`","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/onentry","title":"case onEntry","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/onexit","title":"case onExit","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/onresume","title":"case onResume","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/onsuspend","title":"case onSuspend","type":"case"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/variables","title":"case variables","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/cboilerplate\/sectionname\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/cboilerplate\/sectionname","title":"CBoilerplate.SectionName","type":"enum"}],"path":"\/documentation\/fsm\/cboilerplate\/boilerplate-implementations","title":"Boilerplate Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/cboilerplate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/cboilerplate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/cboilerplate","title":"CBoilerplate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/coordinate2d\/init(_:_:)","title":"init(Double, Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/coordinate2d\/x","title":"var x: Double","type":"property"},{"path":"\/documentation\/fsm\/coordinate2d\/y","title":"var y: Double","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/coordinate2d\/init(r:_:)","title":"init(r: Double, θ: Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/coordinate2d\/h","title":"var h: Double","type":"property"},{"path":"\/documentation\/fsm\/coordinate2d\/polarangle","title":"var polarAngle: Double","type":"property"},{"path":"\/documentation\/fsm\/coordinate2d\/polardistance","title":"var polarDistance: Double","type":"property"},{"path":"\/documentation\/fsm\/coordinate2d\/propertylist","title":"var propertyList: NSArray","type":"property"},{"path":"\/documentation\/fsm\/coordinate2d\/w","title":"var w: Double","type":"property"}],"path":"\/documentation\/fsm\/coordinate2d\/vector2d-implementations","title":"Vector2D Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/coordinate2d","title":"Coordinate2D","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/instance\/init(name:typefile:machine:)","title":"init(name: String, typeFile: String, machine: Machine)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/instance\/machine","title":"var machine: Machine","type":"property"},{"path":"\/documentation\/fsm\/instance\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/fsm\/instance\/typefile","title":"let typeFile: Filename","type":"property"},{"path":"\/documentation\/fsm\/instance\/typename","title":"var typeName: Substring","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/instance\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/fsm\/instance\/==(_:_:)","title":"static func == (Instance, Instance) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/instance\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/instance\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/instance\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/instance","title":"Instance","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/llfsm\/init(states:transitions:suspendstate:)","title":"init(states: [State], transitions: [Transition], suspendState: StateID?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/llfsm\/statenames","title":"var stateNames: [String]","type":"property"},{"path":"\/documentation\/fsm\/llfsm\/states","title":"var states: StateArray","type":"property"},{"path":"\/documentation\/fsm\/llfsm\/suspendstate","title":"var suspendState: StateID?","type":"property"},{"path":"\/documentation\/fsm\/llfsm\/transitions","title":"var transitions: TransitionArray","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/llfsm\/label(for:)","title":"func label(for: TransitionID) -> Expression?","type":"method"},{"path":"\/documentation\/fsm\/llfsm\/set(label:for:)","title":"func set(label: Expression, for: TransitionID)","type":"method"},{"path":"\/documentation\/fsm\/llfsm\/set(name:for:)","title":"func set(name: StateName, for: StateID)","type":"method"},{"path":"\/documentation\/fsm\/llfsm\/statename(for:)","title":"func stateName(for: StateID) -> StateName?","type":"method"},{"path":"\/documentation\/fsm\/llfsm\/transitionsfrom(_:)","title":"func transitionsFrom(StateID) -> TransitionArray","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/llfsm\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/llfsm\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/llfsm\/initialstate","title":"var initialState: StateID","type":"property"}],"path":"\/documentation\/fsm\/llfsm\/fsm-implementations","title":"FSM Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/llfsm\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/llfsm\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/llfsm\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fsm\/llfsm\/suspensiblefsm-implementations","title":"SuspensibleFSM Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/llfsm","title":"LLFSM","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/objcppbinding\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/objcppbinding\/boilerplate","title":"let boilerplate: (URL) -> any Boilerplate","type":"property"},{"path":"\/documentation\/fsm\/objcppbinding\/expressionoftransition","title":"let expressionOfTransition: (URL, StateName) -> (Int) -> String","type":"property"},{"path":"\/documentation\/fsm\/objcppbinding\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/fsm\/objcppbinding\/numberoftransitions","title":"let numberOfTransitions: (URL, StateName) -> Int","type":"property"},{"path":"\/documentation\/fsm\/objcppbinding\/stateboilerplate","title":"var stateBoilerplate: (URL, StateName) -> any Boilerplate","type":"property"},{"path":"\/documentation\/fsm\/objcppbinding\/suspendstate","title":"let suspendState: (URL, [State]) -> StateID?","type":"property"},{"path":"\/documentation\/fsm\/objcppbinding\/targetoftransition","title":"let targetOfTransition: (URL, [State], StateName) -> (Int) -> StateID?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/objcppbinding\/boilerplate(for:)","title":"func boilerplate(for: MachineWrapper) -> any Boilerplate","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/expression(of:for:statename:)","title":"func expression(of: Int, for: MachineWrapper, stateName: StateName) -> String","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/numberoftransitions(for:statename:)","title":"func numberOfTransitions(for: MachineWrapper, stateName: StateName) -> Int","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/stateboilerplate(for:statename:)","title":"func stateBoilerplate(for: MachineWrapper, stateName: StateName) -> any Boilerplate","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/suspendstate(for:states:)","title":"func suspendState(for: MachineWrapper, states: [State]) -> StateID?","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/target(of:for:statename:with:)","title":"func target(of: Int, for: MachineWrapper, stateName: StateName, with: [State]) -> StateID?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/objcppbinding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/objcppbinding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/objcppbinding\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/objcppbinding\/windowlayout(for:)","title":"func windowLayout(for: MachineWrapper) -> Data?","type":"method"}],"path":"\/documentation\/fsm\/objcppbinding\/languagebinding-implementations","title":"LanguageBinding Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/objcppbinding\/add(boilerplate:to:)","title":"func add(boilerplate: any Boilerplate, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/add(layout:to:)","title":"func add(layout: StateNameLayouts, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/add(stateboilerplate:to:for:)","title":"func add(stateBoilerplate: any Boilerplate, to: MachineWrapper, for: String) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/add(statenames:to:)","title":"func add(stateNames: StateNames, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/add(windowlayout:to:)","title":"func add(windowLayout: Data?, to: MachineWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addarrangementcmakefile(for:to:issuspensible:)","title":"func addArrangementCMakeFile(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addarrangementcode(for:to:issuspensible:)","title":"func addArrangementCode(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addarrangementinterface(for:to:issuspensible:)","title":"func addArrangementInterface(for: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addarrangementmachine(instances:to:issuspensible:)","title":"func addArrangementMachine(instances: [Instance], to: ArrangementWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addcmakefile(for:boilerplate:to:issuspensible:)","title":"func addCMakeFile(for: LLFSM, boilerplate: any Boilerplate, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addcmakefile(for:to:issuspensible:)","title":"func addCMakeFile(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addcode(for:to:issuspensible:)","title":"func addCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addinterface(for:to:issuspensible:)","title":"func addInterface(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addlanguage(to:)","title":"func addLanguage(to: FileWrapper) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addstatecode(for:to:issuspensible:)","title":"func addStateCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addstateinterface(for:to:issuspensible:)","title":"func addStateInterface(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/addtransitioncode(for:to:issuspensible:)","title":"func addTransitionCode(for: LLFSM, to: MachineWrapper, isSuspensible: Bool) throws","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/createarrangementwrapper(at:)","title":"func createArrangementWrapper(at: URL) throws -> ArrangementWrapper","type":"method"},{"path":"\/documentation\/fsm\/objcppbinding\/createwrapper(at:for:)","title":"func createWrapper(at: URL, for: Machine?) throws -> MachineWrapper","type":"method"}],"path":"\/documentation\/fsm\/objcppbinding\/outputlanguage-implementations","title":"OutputLanguage Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/objcppbinding","title":"ObjCPPBinding","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/path\/init(_:)","title":"init([Point2D])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/path\/points","title":"var points: [Point2D]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/path\/init(_:)-3r3lf","title":"init(Point2D...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/path\/beg","title":"var beg: Point2D","type":"property"},{"path":"\/documentation\/fsm\/path\/cp1","title":"var cp1: Point2D","type":"property"},{"path":"\/documentation\/fsm\/path\/cp2","title":"var cp2: Point2D","type":"property"},{"path":"\/documentation\/fsm\/path\/end","title":"var end: Point2D","type":"property"},{"path":"\/documentation\/fsm\/path\/x0","title":"var x0: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/x1","title":"var x1: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/x2","title":"var x2: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/xn","title":"var xn: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/xs","title":"var xs: [Double]","type":"property"},{"path":"\/documentation\/fsm\/path\/y0","title":"var y0: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/y1","title":"var y1: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/y2","title":"var y2: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/yn","title":"var yn: Double","type":"property"},{"path":"\/documentation\/fsm\/path\/ys","title":"var ys: [Double]","type":"property"}],"path":"\/documentation\/fsm\/path\/bezierpath-implementations","title":"BezierPath Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/path","title":"Path","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/rectangle\/init(centre:dimensions:)","title":"init(centre: Coordinate2D, dimensions: Dimensions2D)","type":"init"},{"path":"\/documentation\/fsm\/rectangle\/init(topleft:dimensions:)","title":"init(topLeft: Coordinate2D, dimensions: Dimensions2D)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/rectangle\/dimensions","title":"var dimensions: Dimensions2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/topleft","title":"var topLeft: Coordinate2D","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/rectangle\/bottomleft","title":"var bottomLeft: Coordinate2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/bottomright","title":"var bottomRight: Coordinate2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/bottomy","title":"var bottomY: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/h","title":"var h: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/leftx","title":"var leftX: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/rightx","title":"var rightX: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/topright","title":"var topRight: Coordinate2D","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/topy","title":"var topY: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/w","title":"var w: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/x","title":"var x: Double","type":"property"},{"path":"\/documentation\/fsm\/rectangle\/y","title":"var y: Double","type":"property"}],"path":"\/documentation\/fsm\/rectangle\/rectangle2d-implementations","title":"Rectangle2D Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/rectangle","title":"Rectangle","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/state\/init(id:name:)","title":"init(id: StateID, name: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/state\/id","title":"var id: StateID","type":"property"},{"path":"\/documentation\/fsm\/state\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/state\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/state\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/state\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fsm\/state\/statenode-implementations","title":"StateNode Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/state","title":"State","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivitiessourcecode\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivitiessourcecode\/actions","title":"var actions: StateActivitiesSourceCode.StateActionsMapping","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivitiessourcecode\/stateaction","title":"StateActivitiesSourceCode.StateAction","type":"typealias"},{"path":"\/documentation\/fsm\/stateactivitiessourcecode\/stateactions","title":"StateActivitiesSourceCode.StateActions","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivitiessourcecode\/actions(for:)","title":"func actions(for: StateID) -> Self.StateActivity","type":"method"}],"path":"\/documentation\/fsm\/stateactivitiessourcecode\/stateactivities-implementations","title":"StateActivities Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/stateactivitiessourcecode","title":"StateActivitiesSourceCode","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayout\/init(_:index:)","title":"init(NSDictionary, index: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayout\/closedlayout","title":"var closedLayout: Ellipse","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/internalheight","title":"var internalHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/isopen","title":"var isOpen: Bool","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/onentryheight","title":"var onEntryHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/onexitheight","title":"var onExitHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/onresumeheight","title":"var onResumeHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/onsuspendheight","title":"var onSuspendHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/openlayout","title":"var openLayout: Rectangle","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/propertylist","title":"var propertyList: NSDictionary","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/zoomedinternalheight","title":"var zoomedInternalHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/zoomedonentryheight","title":"var zoomedOnEntryHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/zoomedonexitheight","title":"var zoomedOnExitHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/zoomedonresumeheight","title":"var zoomedOnResumeHeight: Double","type":"property"},{"path":"\/documentation\/fsm\/statelayout\/zoomedonsuspendheight","title":"var zoomedOnSuspendHeight: Double","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayout\/layout","title":"var layout: Rectangle","type":"property"}],"path":"\/documentation\/fsm\/statelayout\/statenodelayout-implementations","title":"StateNodeLayout Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/statelayout","title":"StateLayout","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/transition\/init(id:label:source:target:)","title":"init(id: TransitionID, label: Expression, source: StateID, target: StateID)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transition\/id","title":"var id: TransitionID","type":"property"},{"path":"\/documentation\/fsm\/transition\/label","title":"var label: Expression","type":"property"},{"path":"\/documentation\/fsm\/transition\/source","title":"var source: StateID","type":"property"},{"path":"\/documentation\/fsm\/transition\/target","title":"var target: StateID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/transition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/transition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transition\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fsm\/transition\/transitionvertex-implementations","title":"TransitionVertex Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/transition","title":"Transition","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayout\/init(_:)-2gpa9","title":"init(NSDictionary)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayout\/path","title":"var path: Path","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/propertylist","title":"var propertyList: NSDictionary","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayout\/init(_:)-6dega","title":"init(Point2D...)","type":"init"},{"path":"\/documentation\/fsm\/transitionlayout\/init(_:)-7e988","title":"init([Point2D])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayout\/beg","title":"var beg: Point2D","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/cp1","title":"var cp1: Point2D","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/cp2","title":"var cp2: Point2D","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/end","title":"var end: Point2D","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/x0","title":"var x0: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/x1","title":"var x1: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/x2","title":"var x2: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/xn","title":"var xn: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/xs","title":"var xs: [Double]","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/y0","title":"var y0: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/y1","title":"var y1: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/y2","title":"var y2: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/yn","title":"var yn: Double","type":"property"},{"path":"\/documentation\/fsm\/transitionlayout\/ys","title":"var ys: [Double]","type":"property"}],"path":"\/documentation\/fsm\/transitionlayout\/bezierpath-implementations","title":"BezierPath Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayout\/points","title":"var points: [Point2D]","type":"property"}],"path":"\/documentation\/fsm\/transitionlayout\/transitionvertexlayout-implementations","title":"TransitionVertexLayout Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/transitionlayout","title":"TransitionLayout","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/fsm\/uuid_null","title":"let UUID_NULL: uuid_t","type":"var"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/fsm\/boilerplateofcmachine(at:)","title":"func boilerplateOfCMachine(at: MachineWrapper) -> any Boilerplate","type":"func"},{"path":"\/documentation\/fsm\/boilerplateofcstate(_:of:)","title":"func boilerplateofCState(StateName, of: MachineWrapper) -> any Boilerplate","type":"func"},{"path":"\/documentation\/fsm\/boilerplateofobjcppmachine(at:)","title":"func boilerplateofObjCPPMachine(at: URL) -> any Boilerplate","type":"func"},{"path":"\/documentation\/fsm\/boilerplateofobjcppmachine(for:)","title":"func boilerplateofObjCPPMachine(for: MachineWrapper) -> any Boilerplate","type":"func"},{"path":"\/documentation\/fsm\/boilerplateofobjcppstate(_:of:)","title":"func boilerplateofObjCPPState(StateName, of: MachineWrapper) -> any Boilerplate","type":"func"},{"path":"\/documentation\/fsm\/boilerplateofobjcppstate(at:state:)","title":"func boilerplateofObjCPPState(at: URL, state: StateName) -> any Boilerplate","type":"func"},{"path":"\/documentation\/fsm\/carrangementcmakefragment(for:named:issuspensible:)","title":"func cArrangementCMakeFragment(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/carrangementcmakelists(for:named:issuspensible:)","title":"func cArrangementCMakeLists(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/carrangementcode(for:named:issuspensible:)","title":"func cArrangementCode(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/carrangementinterface(for:named:issuspensible:)","title":"func cArrangementInterface(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/carrangementmachinecode(for:named:issuspensible:)","title":"func cArrangementMachineCode(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/carrangementmachineinterface(for:named:issuspensible:)","title":"func cArrangementMachineInterface(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cmachinecode(for:named:issuspensible:)","title":"func cMachineCode(for: LLFSM, named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cmachineinterface(for:named:issuspensible:)","title":"func cMachineInterface(for: LLFSM, named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cmakefragment(for:named:issuspensible:)","title":"func cMakeFragment(for: LLFSM, named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cmakelists(for:named:boilerplate:issuspensible:)","title":"func cMakeLists(for: LLFSM, named: String, boilerplate: any Boilerplate, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cstatecode(for:llfsm:named:issuspensible:)","title":"func cStateCode(for: State, llfsm: LLFSM, named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cstateinterface(for:llfsm:named:issuspensible:)","title":"func cStateInterface(for: State, llfsm: LLFSM, named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cstaticarrangementcode(for:named:issuspensible:)","title":"func cStaticArrangementCode(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cstaticarrangementinterface(for:named:issuspensible:)","title":"func cStaticArrangementInterface(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/cstaticarrangementmaincode(for:named:issuspensible:)","title":"func cStaticArrangementMainCode(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/contentofcimplementation(for:)","title":"func contentOfCImplementation(for: MachineWrapper) -> String?","type":"func"},{"path":"\/documentation\/fsm\/contentofcstate(for:state:)","title":"func contentOfCState(for: MachineWrapper, state: StateName) -> String?","type":"func"},{"path":"\/documentation\/fsm\/contentofobjcppimplementation(for:)","title":"func contentOfObjCPPImplementation(for: MachineWrapper) -> String?","type":"func"},{"path":"\/documentation\/fsm\/contentofobjcppimplementationfor(machine:)","title":"func contentOfObjCPPImplementationFor(machine: URL) -> String?","type":"func"},{"path":"\/documentation\/fsm\/contentofobjcppstate(for:state:)","title":"func contentOfObjCPPState(for: MachineWrapper, state: StateName) -> String?","type":"func"},{"path":"\/documentation\/fsm\/contentofobjcppstatefor(machine:state:)","title":"func contentOfObjCPPStateFor(machine: URL, state: StateName) -> String?","type":"func"},{"path":"\/documentation\/fsm\/dictionary(from:)","title":"func dictionary(from: StateNameLayouts) -> NSDictionary","type":"func"},{"path":"\/documentation\/fsm\/expressionofctransition(_:state:for:)","title":"func expressionOfCTransition(Int, state: StateName, for: MachineWrapper) -> String","type":"func"},{"path":"\/documentation\/fsm\/expressionofobjcpptransition(_:state:for:)","title":"func expressionOfObjCPPTransition(Int, state: StateName, for: MachineWrapper) -> String","type":"func"},{"path":"\/documentation\/fsm\/expressionofobjcpptransitionfor(machine:state:transition:)","title":"func expressionOfObjCPPTransitionFor(machine: URL, state: StateName, transition: Int) -> String","type":"func"},{"path":"\/documentation\/fsm\/languagebinding(for:)-1ww9u","title":"func languageBinding(for: String?) -> any LanguageBinding","type":"func"},{"path":"\/documentation\/fsm\/languagebinding(for:)-4i2km","title":"func languageBinding(for: URL) -> any LanguageBinding","type":"func"},{"path":"\/documentation\/fsm\/languagebinding(for:)-8jpe0","title":"func languageBinding(for: DirectoryWrapper) -> any LanguageBinding","type":"func"},{"path":"\/documentation\/fsm\/languagebindingifavailable(for:)","title":"func languageBindingIfAvailable(for: FileWrapper) -> (any LanguageBinding)?","type":"func"},{"path":"\/documentation\/fsm\/numberofctransitions(for:state:)","title":"func numberOfCTransitions(for: MachineWrapper, state: StateName) -> Int","type":"func"},{"path":"\/documentation\/fsm\/numberofctransitionsin(header:)","title":"func numberOfCTransitionsIn(header: String) -> Int","type":"func"},{"path":"\/documentation\/fsm\/numberofobjcpptransitions(for:state:)","title":"func numberOfObjCPPTransitions(for: MachineWrapper, state: StateName) -> Int","type":"func"},{"path":"\/documentation\/fsm\/numberofobjcpptransitionsfor(machine:state:)","title":"func numberOfObjCPPTransitionsFor(machine: URL, state: StateName) -> Int","type":"func"},{"path":"\/documentation\/fsm\/numberofobjcpptransitionsin(header:)","title":"func numberOfObjCPPTransitionsIn(header: String) -> Int","type":"func"},{"path":"\/documentation\/fsm\/objcpparrangementcmakefragment(for:named:issuspensible:)","title":"func objcppArrangementCMakeFragment(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcpparrangementcmakelists(for:named:issuspensible:)","title":"func objcppArrangementCMakeLists(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcpparrangementheader(for:named:issuspensible:)","title":"func objcppArrangementHeader(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcpparrangementimplementation(for:named:issuspensible:)","title":"func objcppArrangementImplementation(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppcmakefragment(for:named:issuspensible:)","title":"func objcppCMakeFragment(for: LLFSM, named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppcmakelists(for:named:boilerplate:issuspensible:)","title":"func objcppCMakeLists(for: LLFSM, named: String, boilerplate: any Boilerplate, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppmachineheader(for:named:)","title":"func objcppMachineHeader(for: LLFSM, named: String) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppmachineimplementation(for:named:)","title":"func objcppMachineImplementation(for: LLFSM, named: String) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppstateheader(for:llfsm:named:)","title":"func objcppStateHeader(for: State, llfsm: LLFSM, named: String) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppstateimplementation(for:llfsm:named:)","title":"func objcppStateImplementation(for: State, llfsm: LLFSM, named: String) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppstaticarrangementcmakefragment(for:named:issuspensible:)","title":"func objcppStaticArrangementCMakeFragment(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppstaticarrangementcmakelists(for:named:issuspensible:)","title":"func objcppStaticArrangementCMakeLists(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppstaticarrangementcode(for:named:issuspensible:)","title":"func objcppStaticArrangementCode(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppstaticarrangementinterface(for:named:issuspensible:)","title":"func objcppStaticArrangementInterface(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/objcppstaticarrangementmaincode(for:named:issuspensible:)","title":"func objcppStaticArrangementMainCode(for: [Instance], named: String, isSuspensible: Bool) -> Code","type":"func"},{"path":"\/documentation\/fsm\/outputlanguage(for:default:)","title":"func outputLanguage(for: Format?, default: (any LanguageBinding)?) -> (any OutputLanguage)?","type":"func"},{"path":"\/documentation\/fsm\/statenamelayouts(from:)-2ieid","title":"func stateNameLayouts(from: URL) throws -> StateNameLayouts","type":"func"},{"path":"\/documentation\/fsm\/statenamelayouts(from:)-364vd","title":"func stateNameLayouts(from: NSDictionary) -> StateNameLayouts","type":"func"},{"path":"\/documentation\/fsm\/statenamelayouts(from:)-3uhun","title":"func stateNameLayouts(from: FileWrapper) -> StateNameLayouts","type":"func"},{"path":"\/documentation\/fsm\/statenames(for:statesfilename:)","title":"func stateNames(for: MachineWrapper, statesFilename: Filename) -> StateNames","type":"func"},{"path":"\/documentation\/fsm\/statenames(from:)-7oqpg","title":"func stateNames(from: URL) throws -> StateNames","type":"func"},{"path":"\/documentation\/fsm\/statenames(from:)-84x7","title":"func stateNames(from: String) -> StateNames","type":"func"},{"path":"\/documentation\/fsm\/suspendstateindexofcmachine(inimplementation:)","title":"func suspendStateIndexOfCMachine(inImplementation: String) -> Int?","type":"func"},{"path":"\/documentation\/fsm\/suspendstateindexofobjcppmachine(inimplementation:)","title":"func suspendStateIndexOfObjCPPMachine(inImplementation: String) -> Int?","type":"func"},{"path":"\/documentation\/fsm\/suspendstateofcmachine(_:states:)","title":"func suspendStateOfCMachine(MachineWrapper, states: [State]) -> StateID?","type":"func"},{"path":"\/documentation\/fsm\/suspendstateofobjcppmachine(_:states:)-3texk","title":"func suspendStateOfObjCPPMachine(URL, states: [State]) -> StateID?","type":"func"},{"path":"\/documentation\/fsm\/suspendstateofobjcppmachine(_:states:)-abgu","title":"func suspendStateOfObjCPPMachine(MachineWrapper, states: [State]) -> StateID?","type":"func"},{"path":"\/documentation\/fsm\/targetofctransition(_:state:for:with:)","title":"func targetOfCTransition(Int, state: StateName, for: MachineWrapper, with: [State]) -> StateID?","type":"func"},{"path":"\/documentation\/fsm\/targetofobjcpptransition(_:state:for:with:)","title":"func targetOfObjCPPTransition(Int, state: StateName, for: MachineWrapper, with: [State]) -> StateID?","type":"func"},{"path":"\/documentation\/fsm\/targetofobjcpptransitionfor(machine:states:state:transition:)","title":"func targetOfObjCPPTransitionFor(machine: URL, states: [State], state: StateName, transition: Int) -> StateID?","type":"func"},{"path":"\/documentation\/fsm\/targetstateindexofctransition(_:inheader:)","title":"func targetStateIndexOfCTransition(Int, inHeader: String) -> Int?","type":"func"},{"path":"\/documentation\/fsm\/targetstateindexofobjcpptransition(_:inheader:)","title":"func targetStateIndexOfObjCPPTransition(Int, inHeader: String) -> Int?","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/!=(_:_:)","title":"func != ((any LanguageBinding)?, (any LanguageBinding)?) -> Bool","type":"op"},{"path":"\/documentation\/fsm\/+(_:_:)","title":"func + <V>(V, V) -> V","type":"op"},{"path":"\/documentation\/fsm\/-(_:_:)","title":"func - <V>(V, V) -> V","type":"op"},{"path":"\/documentation\/fsm\/==(_:_:)-28vlk","title":"func == <T>(T, T) -> Bool","type":"op"},{"path":"\/documentation\/fsm\/==(_:_:)-2g3p4","title":"func == <S>(S, S) -> Bool","type":"op"},{"path":"\/documentation\/fsm\/==(_:_:)-3mr6m","title":"func == ((any LanguageBinding)?, (any LanguageBinding)?) -> Bool","type":"op"},{"path":"\/documentation\/fsm\/==(_:_:)-7e8uv","title":"func == (Transition, Transition) -> Bool","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fsm\/boilerplatecode","title":"BoilerplateCode","type":"typealias"},{"path":"\/documentation\/fsm\/code","title":"Code","type":"typealias"},{"path":"\/documentation\/fsm\/dimensions2d","title":"Dimensions2D","type":"typealias"},{"path":"\/documentation\/fsm\/ellipse","title":"Ellipse","type":"typealias"},{"path":"\/documentation\/fsm\/expression","title":"Expression","type":"typealias"},{"path":"\/documentation\/fsm\/filename","title":"Filename","type":"typealias"},{"path":"\/documentation\/fsm\/layoutdictionary","title":"LayoutDictionary","type":"typealias"},{"path":"\/documentation\/fsm\/machinename","title":"MachineName","type":"typealias"},{"path":"\/documentation\/fsm\/point2d","title":"Point2D","type":"typealias"},{"path":"\/documentation\/fsm\/statearray","title":"StateArray","type":"typealias"},{"path":"\/documentation\/fsm\/statedictionary","title":"StateDictionary","type":"typealias"},{"path":"\/documentation\/fsm\/stateid","title":"StateID","type":"typealias"},{"path":"\/documentation\/fsm\/statelayouts","title":"StateLayouts","type":"typealias"},{"path":"\/documentation\/fsm\/statename","title":"StateName","type":"typealias"},{"path":"\/documentation\/fsm\/statenamelayouts","title":"StateNameLayouts","type":"typealias"},{"path":"\/documentation\/fsm\/statenames","title":"StateNames","type":"typealias"},{"path":"\/documentation\/fsm\/transitionarray","title":"TransitionArray","type":"typealias"},{"path":"\/documentation\/fsm\/transitiondictionary","title":"TransitionDictionary","type":"typealias"},{"path":"\/documentation\/fsm\/transitionid","title":"TransitionID","type":"typealias"},{"path":"\/documentation\/fsm\/transitionlayouts","title":"TransitionLayouts","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsmerror\/notadirectory","title":"case notADirectory","type":"case"},{"path":"\/documentation\/fsm\/fsmerror\/unsupportedoutputformat","title":"case unsupportedOutputFormat","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsmerror\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsmerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/fsmerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsmerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/fsm\/fsmerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsmerror\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsmerror\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/fsmerror\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fsm\/fsmerror\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/fsmerror\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/fsmerror","title":"FSMError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsm\/format\/c","title":"case c","type":"case"},{"path":"\/documentation\/fsm\/format\/cpp","title":"case cpp","type":"case"},{"path":"\/documentation\/fsm\/format\/cx","title":"case cx","type":"case"},{"path":"\/documentation\/fsm\/format\/cxx","title":"case cxx","type":"case"},{"path":"\/documentation\/fsm\/format\/objc","title":"case objC","type":"case"},{"path":"\/documentation\/fsm\/format\/objcpp","title":"case objCPP","type":"case"},{"path":"\/documentation\/fsm\/format\/objcx","title":"case objCX","type":"case"},{"path":"\/documentation\/fsm\/format\/swift","title":"case swift","type":"case"},{"path":"\/documentation\/fsm\/format\/verilog","title":"case verilog","type":"case"},{"path":"\/documentation\/fsm\/format\/vhdl","title":"case vhdl","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/format\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/format\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/format\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/format\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/format\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/format\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fsm\/format\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/format\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/format","title":"Format","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactionindex\/internal","title":"case `internal`","type":"case"},{"path":"\/documentation\/fsm\/stateactionindex\/onentry","title":"case onEntry","type":"case"},{"path":"\/documentation\/fsm\/stateactionindex\/onexit","title":"case onExit","type":"case"},{"path":"\/documentation\/fsm\/stateactionindex\/onresume","title":"case onResume","type":"case"},{"path":"\/documentation\/fsm\/stateactionindex\/onsuspend","title":"case onSuspend","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactionindex\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactionindex\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/stateactionindex\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactionindex\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactionindex\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactionindex\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fsm\/stateactionindex\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/stateactionindex\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/stateactionindex","title":"StateActionIndex","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivityname\/internal","title":"case `internal`","type":"case"},{"path":"\/documentation\/fsm\/stateactivityname\/onentry","title":"case onEntry","type":"case"},{"path":"\/documentation\/fsm\/stateactivityname\/onexit","title":"case onExit","type":"case"},{"path":"\/documentation\/fsm\/stateactivityname\/onresume","title":"case onResume","type":"case"},{"path":"\/documentation\/fsm\/stateactivityname\/onsuspend","title":"case onSuspend","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivityname\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivityname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/stateactivityname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivityname\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivityname\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/stateactivityname\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fsm\/stateactivityname\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/stateactivityname\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/stateactivityname","title":"StateActivityName","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayoutkey\/expanded","title":"case expanded","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/expandedheight","title":"case expandedHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/expandedwidth","title":"case expandedWidth","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/height","title":"case height","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/internalheight","title":"case internalHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/onentryheight","title":"case onEntryHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/onexitheight","title":"case onExitHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/onresumeheight","title":"case onResumeHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/onsuspendheight","title":"case onSuspendHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/positionx","title":"case positionX","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/positiony","title":"case positionY","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/width","title":"case width","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/zoomedinternalheight","title":"case zoomedInternalHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/zoomedonentryheight","title":"case zoomedOnEntryHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/zoomedonexitheight","title":"case zoomedOnExitHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/zoomedonresumeheight","title":"case zoomedOnResumeHeight","type":"case"},{"path":"\/documentation\/fsm\/statelayoutkey\/zoomedonsuspendheight","title":"case zoomedOnSuspendHeight","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayoutkey\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayoutkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/statelayoutkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayoutkey\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/statelayoutkey\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/statelayoutkey\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/statelayoutkey","title":"StateLayoutKey","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/bezierpath","title":"case bezierPath","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/ctlpoint1","title":"case ctlPoint1","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/ctlpoint1x","title":"case ctlPoint1X","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/ctlpoint1y","title":"case ctlPoint1Y","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/ctlpoint2","title":"case ctlPoint2","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/ctlpoint2x","title":"case ctlPoint2X","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/ctlpoint2y","title":"case ctlPoint2Y","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/dstpoint","title":"case dstPoint","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/dstpointx","title":"case dstPointX","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/dstpointy","title":"case dstPointY","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/srcpoint","title":"case srcPoint","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/srcpointx","title":"case srcPointX","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/srcpointy","title":"case srcPointY","type":"case"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/transitions","title":"case transitions","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsm\/transitionlayoutkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsm\/transitionlayoutkey\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fsm\/transitionlayoutkey\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fsm\/transitionlayoutkey","title":"TransitionLayoutKey","type":"enum"}],"path":"\/documentation\/fsm","title":"FSM","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}